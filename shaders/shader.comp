#version 450

#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_8bit_storage : require

layout(local_size_x = 1, local_size_y = 1) in;

layout( push_constant ) uniform constants
{
	int y_start;
	int x_start;
	int scanline_size;
	int bytes_per_pixel;
    int stride;
} p;

layout(std430, binding = 0) buffer lay0 { uint8_t img_data[]; };
layout(std430, binding = 1) buffer lay1 { uint8_t dest[]; };

void main()
{
    const uint x = p.x_start + gl_GlobalInvocationID.x;
    const uint y = p.y_start - gl_GlobalInvocationID.x;

    if (x >= p.scanline_size)
        return;
    switch (uint(img_data[y * p.stride]))
    {
        case 0:
            dest[y * p.scanline_size + x] = img_data[y * p.stride + x + 1];
            break;
        case 1:
            if (x >= p.bytes_per_pixel)
                dest[y * p.scanline_size + x] = img_data[y * p.stride + x + 1] + dest[y * p.scanline_size + (x - p.bytes_per_pixel)];
            else
                dest[y * p.scanline_size + x] = img_data[y * p.stride + x + 1];
            break;
        case 2:
            if (y > 0)
                dest[y * p.scanline_size + x] = img_data[y * p.stride + x + 1] + dest[(y - 1) * p.scanline_size + x];
            else
                dest[y * p.scanline_size + x] = img_data[y * p.stride + x + 1];
            break;
        case 3:
            if (x >= p.bytes_per_pixel && y > 0)
                dest[y * p.scanline_size + x] = img_data[y * p.stride + x + 1] + uint8_t(((uint(dest[y * p.scanline_size + (x - p.bytes_per_pixel)]) + uint(dest[(y - 1) * p.scanline_size + x]))/2));
            else if(x >= p.bytes_per_pixel)
                dest[y * p.scanline_size + x] = img_data[y * p.stride + x + 1] + uint8_t(uint(dest[y * p.scanline_size + (x - p.bytes_per_pixel)])/2);
            else if (y > 0)
                dest[y * p.scanline_size + x] = img_data[y * p.stride + x + 1] + uint8_t(uint(dest[(y - 1) * p.scanline_size + x]/2));
            else
                dest[y * p.scanline_size + x] = img_data[y * p.stride + x + 1];
            break;
        case 4:
            if (x >= p.bytes_per_pixel && y > 0)
            {
                int pred = int(dest[y * p.scanline_size + (x - p.bytes_per_pixel)]) + int(dest[(y - 1) * p.scanline_size + x]) - int(dest[(y - 1) * p.scanline_size + (x - p.bytes_per_pixel)]);
                int pred1 = abs(pred - int(dest[y * p.scanline_size + (x - p.bytes_per_pixel)]));
                int pred2 = abs(pred - int(dest[(y - 1) * p.scanline_size + x]));
                int pred3 = abs(pred - int(dest[(y - 1) * p.scanline_size + (x - p.bytes_per_pixel)]));
                if (pred1 <= pred2 && pred1 <= pred3)
                    dest[(y * p.scanline_size) + x] = img_data[(y * p.stride) + x + 1] + dest[y * p.scanline_size + (x - p.bytes_per_pixel)];
                else if (pred2 <= pred3)
                    dest[(y * p.scanline_size) + x] = img_data[(y * p.stride) + x + 1] + dest[(y - 1) * p.scanline_size + x];
                else
                    dest[(y * p.scanline_size) + x] = img_data[(y * p.stride) + x + 1] + dest[(y - 1) * p.scanline_size + (x - p.bytes_per_pixel)];
            }
            else if(x >= p.bytes_per_pixel)
                dest[y * p.scanline_size + x] = img_data[y * p.stride + x + 1] + dest[y * p.scanline_size + (x - p.bytes_per_pixel)];
            else if (y > 0)
                dest[y * p.scanline_size + x] = img_data[y * p.stride + x + 1] + dest[(y - 1) * p.scanline_size + x];
            else
                dest[y * p.scanline_size + x] = img_data[y * p.stride + x + 1];
            break;
    }
}
